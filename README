Node Hotel Application
The Node Hotel application is a Node.js-based system developed using the Express.js framework, with MongoDB as the database. This application manages information related to persons (staff) and menu items, and provides endpoints for performing CRUD (Create, Read, Update, Delete) operations for both entities.

Features
Manage hotel staff information (name, role, salary, etc.).
Manage hotel menu items (name, price, taste, etc.).
Expose various API endpoints to handle CRUD operations for both persons and menu items.
Endpoints
Persons
1. Add a Person
Endpoint: POST /person
Description: Adds a person to the system with details such as name, role, age, etc.
2. Get All Persons
Endpoint: GET /person
Description: Retrieves a list of all persons in the system.
3. Get Persons by Work Type
Endpoint: GET /person/:workType
Description: Retrieves a list of persons based on their work type (e.g., chef, waiter, manager).
4. Update a Person
Endpoint: PUT /person/:id
Description: Updates the details of a specific person identified by their ID.
5. Delete a Person
Endpoint: DELETE /person/:id
Description: Deletes a person from the system based on their ID.
Menu Items
1. Add a Menu Item
Endpoint: POST /menu
Description: Adds a menu item to the system with details such as name, price, taste, etc.
2. Get All Menu Items
Endpoint: GET /menu
Description: Retrieves a list of all menu items in the system.
3. Get Menu Items by Taste
Endpoint: GET /menu/:taste
Description: Retrieves a list of menu items based on their taste (e.g., sweet, spicy, sour).
4. Update a Menu Item
Endpoint: PUT /menu/:id
Description: Updates the details of a specific menu item identified by its ID.
5. Delete a Menu Item
Endpoint: DELETE /menu/:id
Description: Deletes a menu item from the system based on its ID.
Data Models
Person
The Person data model represents the staff working in the hotel.

Fields:

name: String (Person's name)
age: Number (Person's age)
work: Enum (Role in the hotel, e.g., chef, waiter, manager)
mobile: String (Person's mobile number)
email: String (Person's email address, unique)
address: String (Person's address)
salary: Number (Person's salary)
Example:

json
Copy code
{
  "name": "John Doe",
  "age": 30,
  "work": "waiter",
  "mobile": "123-456-7890",
  "email": "john@example.com",
  "address": "123 Main Street",
  "salary": 30000
}
Menu Item
The MenuItem data model represents the dishes or drinks available in the hotel.

Fields:

name: String (Item's name)
price: Number (Item's price)
taste: Enum (Item's taste, e.g., sweet, spicy, sour)
is_drink: Boolean (Indicates if the item is a drink, default is false)
ingredients: Array of Strings (List of ingredients, default is an empty array)
num_sales: Number (Number of times the item has been sold, default is 0)
Example:

json
Copy code
{
  "name": "Spicy Chicken Curry",
  "price": 12.99,
  "taste": "spicy",
  "is_drink": false,
  "ingredients": ["chicken", "spices", "vegetables"],
  "num_sales": 50
}
Installation
Clone the repository:

bash
Copy code
git clone <repository-url>
Install the dependencies:

bash
Copy code
npm install
Start the server:

bash
Copy code
npm start
